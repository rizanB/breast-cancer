feature_list_with_test_values = {
    "benign": {
        "radius_mean": 12.0,
        "texture_mean": 16.0,
        "perimeter_mean": 78.0,
        "area_mean": 500.0,
        "smoothness_mean": 0.08,
        "compactness_mean": 0.05,
        "concavity_mean": 0.0,
        "concave points_mean": 0.0,
        "symmetry_mean": 0.2,
        "fractal_dimension_mean": 0.05,
        "radius_se": 0.5,
        "texture_se": 1.0,
        "perimeter_se": 2.0,
        "area_se": 20.0,
        "smoothness_se": 0.01,
        "compactness_se": 0.01,
        "concavity_se": 0.01,
        "concave points_se": 0.01,
        "symmetry_se": 0.02,
        "fractal_dimension_se": 0.005,
        "radius_worst": 14.0,
        "texture_worst": 18.0,
        "perimeter_worst": 85.0,
        "area_worst": 550.0,
        "smoothness_worst": 0.15,
        "compactness_worst": 0.1,
        "concavity_worst": 0.1,
        "concave points_worst": 0.1,
        "symmetry_worst": 0.25,
        "fractal_dimension_worst": 0.06
    },
    "malignant": {
        "radius_mean": 18.0,
        "texture_mean": 22.0,
        "perimeter_mean": 100.0,
        "area_mean": 700.0,
        "smoothness_mean": 0.12,
        "compactness_mean": 0.15,
        "concavity_mean": 0.25,
        "concave points_mean": 0.2,
        "symmetry_mean": 0.3,
        "fractal_dimension_mean": 0.08,
        "radius_se": 0.7,
        "texture_se": 1.5,
        "perimeter_se": 4.0,
        "area_se": 30.0,
        "smoothness_se": 0.02,
        "compactness_se": 0.02,
        "concavity_se": 0.02,
        "concave points_se": 0.02,
        "symmetry_se": 0.03,
        "fractal_dimension_se": 0.007,
        "radius_worst": 25.0,
        "texture_worst": 35.0,
        "perimeter_worst": 130.0,
        "area_worst": 900.0,
        "smoothness_worst": 0.25,
        "compactness_worst": 0.2,
        "concavity_worst": 0.3,
        "concave points_worst": 0.3,
        "symmetry_worst": 0.4,
        "fractal_dimension_worst": 0.1
    }
}

model_list = ["DecisionTreeClassifier().pkl", "GaussianNB().pkl", "GradientBoostingClassifier().pkl", "KNeighborsClassifier().pkl",
              "LogisticRegression(max_iter=200).pkl", "RandomForestClassifier().pkl", "SVC(probability=True).pkl"]
